{
  "include": ["src/**/*"],                               /* .ts, .tsx, and .d.ts file extension by default, with .js and .jsx if allowJs is set to true */
  "exclude": ["node_modules", "public", "**/__tests__", "**/*.test.ts"],

  "compilerOptions": {
    /* LANGUAGE AND ENVIRONMENT */
    "target": "ESNext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": ["DOM"],                                      /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "jsx": "react",                                      /* Controls how JSX constructs are emitted in JavaScript files. This only affects output of JS files that started in .tsx files. */
    // "experimentalDecorators": true,                   /* Enables experimental support for decorators, which is a version of decorators that predates the TC39 standardization process. */

    /* MODULES */
    "module": "ESNext",                                  /* Specify what module code is generated. */
    "moduleResolution": "Node",                          /* Specify how TypeScript looks up a file from a given module specifier. */
    "baseUrl": "src",                                    /* Specify the base directory to resolve non-relative module names. */
    "rootDir": "src",                                    /* Specify the root folder within your source files. */
    // "typeRoots": ["./node_modules/@types/"],          /* By default, all visible '@types' packages are included in your compilation. Packages in node_modules/@types of any enclosing folder are considered visible. */
    "resolveJsonModule": true,                           /* Enable importing .json files. */

    /* JAVASCRIPT SUPPORT */
    "allowJs": false,                                    /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */

    /* EMIT */
    "noEmit": false,                                     /* Disable emitting files from a compilation. */
    // "outDir": "lib",                                  /* Specify an output folder for all emitted files. */
    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": true,                              /* Create sourcemaps for d.ts files. */
    "emitDeclarationOnly": true,                         /* Only output d.ts files and not JavaScript files. */
    "declarationDir": "lib/types",                       /* Specify the output directory for generated declaration files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    "removeComments": false,                             /* Disable emitting comments. */
    "preserveConstEnums": true,                          /* Do not erase const enum declarations in generated code. */
    "downlevelIteration": false,                         /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    "newLine": "lf",                                     /* Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix). */

    /* INTEROP CONSTRAINTS */
    "isolatedModules": true,                             /* Ensure that each file can be safely transpiled without relying on other imports. */
    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* TYPE CHECKING */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true,                              /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                          /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    "allowUnusedLabels": false,                          /* Disable error reporting for unused labels. */
    "allowUnreachableCode": false,                       /* Disable error reporting for unreachable code. */

    /* COMPLETENESS */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
